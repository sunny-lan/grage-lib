{"version":3,"file":"clientv2.js","sourceRoot":"","sources":["../src/clientv2.ts"],"names":[],"mappings":"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","sourcesContent":["import {ChannelMessage, ConnectMessage, DataMessage, Message, Ping, RequestPing} from \"./lib\";\r\n\r\nimport {IMessageEvent} from 'websocket';\r\nimport {GrageAPI, GrageDeviceStatus} from \"./GrageAPI\";\r\nimport {ConnectionState, IWebsocket} from \"./IWebsocket\";\r\nimport StableWs from \"./stableWs\";\r\n\r\nfunction isRequestPing(m: Message): m is RequestPing {\r\n    return m.type === 'rping';\r\n}\r\n\r\nfunction isPingMessage(m: Message): m is Ping {\r\n    return m.type === 'ping';\r\n}\r\n\r\nfunction isChannelMessage(m: Message): m is ChannelMessage {\r\n    return isDataMessage(m) || isRequestPing(m) || isPingMessage(m);\r\n}\r\n\r\nfunction isDataMessage(m: Message): m is DataMessage {\r\n    return m.type === 'data';\r\n}\r\n\r\n\r\ntype LiveListener = (alive: GrageDeviceStatus) => void;\r\ntype TerminateListener = (reason: any) => void;\r\n\r\ntype ChannelListener = (data: any) => void;\r\ntype Channel = {\r\n    dataListeners: Set<ChannelListener>;\r\n    curStatus: GrageDeviceStatus;\r\n    deviceStatusListeners: Set<LiveListener>;\r\n\r\n    lastAliveTime: number\r\n    lastPingTime: number\r\n    pingInFlight: boolean\r\n\r\n    isConnected: boolean\r\n\r\n};\r\n\r\nexport default class GrageClient implements GrageAPI {\r\n    private channels: {\r\n        [id: string]: Channel;\r\n    } = {};\r\n    private ws: IWebsocket = new StableWs();\r\n\r\n    options = {\r\n        timeout: 10000, pingPeriod: 4500, checkPeriod: 1000\r\n    }\r\n\r\n    private debug(...args: any) {\r\n        console.log(...args)\r\n    }\r\n\r\n    private handleMsg(evt: IMessageEvent) {\r\n        let m;\r\n        try {\r\n            m = JSON.parse(evt.data as string) as Message;\r\n        } catch (e) {\r\n            console.error('Failed parse message ', e, evt.data)\r\n            return;\r\n        }\r\n\r\n        this.debug('[recv]', m);\r\n\r\n        //ignore messages from other browsers, ignore non subscribed messages\r\n        if (isChannelMessage(m) && m.fromDevice && this.channels.hasOwnProperty(m.id)) {\r\n            const channel = this.channels[m.id];\r\n            //since this device just sent a message,\r\n            //it must be alive\r\n            this.setDeviceState(m.id, GrageDeviceStatus.ALIVE);\r\n\r\n            if (isDataMessage(m)) {\r\n                //send to every listener in the proper channel\r\n                for (const listener of channel.dataListeners) {\r\n                    listener(m.data);\r\n                }\r\n            }\r\n        } else {\r\n            console.warn('[Unknown message type]', m);\r\n        }\r\n    }\r\n\r\n    private checkConnections() {\r\n        const now = Date.now()\r\n        for (const [id, channel] of Object.entries(this.channels)) {\r\n            if (this.ws.getConnectionState() === ConnectionState.Connected) {\r\n                const timeSincePing = now - channel.lastPingTime;\r\n                const timeSinceAlive = now - channel.lastAliveTime;\r\n\r\n                if (Math.max(timeSincePing, timeSinceAlive) >= this.options.pingPeriod) {\r\n                    this.requestPing(id)\r\n                }\r\n\r\n                // If the last known alive was more than timeout ago and we did ping\r\n                // then the device must be dead\r\n\r\n                if (timeSinceAlive > this.options.timeout) {\r\n                    if (channel.pingInFlight) {\r\n                        this.setDeviceState(id, GrageDeviceStatus.DEAD)\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                this.setDeviceState(id, GrageDeviceStatus.NETWORK_DISCONNECTED)\r\n            }\r\n        }\r\n    }\r\n\r\n    begin(url) {\r\n\r\n        const a = this.ws.begin(url)\r\n        const b = this.ws.onMessage(this.handleMsg.bind(this))\r\n        const c = setInterval(this.checkConnections.bind(this), this.options.checkPeriod)\r\n        return function () {\r\n            a();\r\n            b();\r\n            clearInterval(c)\r\n        }\r\n    }\r\n\r\n    sendImpl(id: string, m: Message): void {\r\n\r\n        let o = JSON.stringify(m);\r\n        this.ws.send(m)\r\n    }\r\n\r\n    send(id: string, data: any): void {\r\n        const m: DataMessage = {\r\n            type: \"data\",\r\n            data,\r\n            id,\r\n            fromDevice: false,\r\n        };\r\n\r\n        this.sendImpl(id, m);\r\n    }\r\n\r\n    private sendConnect(id: string) {\r\n\r\n        //send channel connect message\r\n        const m: ConnectMessage = {\r\n            type: \"connect\",\r\n            id,\r\n        };\r\n        this.ws.send(m);\r\n        this.channels[id].isConnected = true;\r\n    }\r\n\r\n    private ensureExists(id: string) {\r\n        if (!this.channels.hasOwnProperty(id)) {\r\n            //initialize channelListeners\r\n            this.channels[id] = {\r\n                dataListeners: new Set<ChannelListener>(),\r\n                deviceStatusListeners: new Set<LiveListener>(),\r\n                curStatus: GrageDeviceStatus.NETWORK_DISCONNECTED,\r\n                isConnected: false,\r\n\r\n                lastPingTime: 0,\r\n                lastAliveTime: 0,\r\n                pingInFlight: false\r\n            };\r\n        }\r\n    }\r\n\r\n    requestPing(id: string) {\r\n        this.ensureExists(id)\r\n        //send ping\r\n        const m: RequestPing = {\r\n            type: \"rping\",\r\n            id,\r\n            fromDevice: false\r\n        };\r\n\r\n        this.sendImpl(id, m);\r\n        this.channels[id].lastPingTime = Date.now()\r\n        this.channels[id].pingInFlight = true\r\n    }\r\n\r\n    subscribe(id: string, callback: (msg: Message) => void): () => void {\r\n        this.ensureExists(id)\r\n\r\n\r\n        if (!this.channels[id].isConnected) {\r\n            this.sendConnect(id)\r\n        }\r\n\r\n        this.channels[id].dataListeners.add(callback)\r\n        return () => this.channels[id].dataListeners.delete(callback)\r\n    }\r\n\r\n    onStatusChanged(id: string, callback: (alive: GrageDeviceStatus) => void): () => void {\r\n        this.ensureExists(id)\r\n        callback(this.channels[id].curStatus)\r\n        this.channels[id].deviceStatusListeners.add(callback)\r\n        return () => {\r\n            this.channels[id].deviceStatusListeners.delete(callback)\r\n        };\r\n    }\r\n\r\n\r\n    private setDeviceState(id: string, newState: GrageDeviceStatus) {\r\n        this.ensureExists(id)\r\n        const channel = this.channels[id]\r\n        if (channel.curStatus !== newState) {\r\n            channel.curStatus = newState;\r\n            if (newState == GrageDeviceStatus.ALIVE) {\r\n                channel.lastAliveTime = Date.now()\r\n                channel.pingInFlight = false\r\n            }\r\n\r\n            for (const listener of channel.deviceStatusListeners) {\r\n                listener(newState)\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}